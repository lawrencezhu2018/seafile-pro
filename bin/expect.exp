#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed May 22 12:53:40 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(WORK_DIR)/bin/execute.sh
match_max 100000
expect -exact "New password for the MySQL \"root\" user: "
send -- "$env(ROOT_PW)\r"
expect -exact "Repeat password for the MySQL \"root\" user: "
send -- "$env(ROOT_PW)\r"
expect  "Press ENTER to continue*"
send -- "\r"
expect -exact "\[ server name \] "
send -- "seafile-server\r"
expect -exact "\[ This server's ip or domain \] "
send -- "127.0.0.1\r"
expect -exact "\[ default \"/seafile/seafile-data\" \] "
send -- "\r"
expect -exact "\[ default \"8082\" \] "
send -- "\r"
expect -exact "\[ 1 or 2 \] "
send -- "1\r"
expect -exact "\[ default \"localhost\" \] "
send -- "\r"
expect -exact "\[ default \"3306\" \] "
send -- "\r"
expect -exact "\[ root password \] "
send -- "$env(ROOT_PW)\r"
expect -exact "\[ default \"seafile\" \] "
send -- "\r"
expect -exact "\[ password for seafile \] "
send -- "$env(SEAFILE_PW)\r"
expect -exact "\[ default \"ccnet-db\" \] "
send -- "\r"
expect -exact "\[ default \"seafile-db\" \] "
send -- "\r"
expect -exact "\[ default \"seahub-db\" \] "
send -- "\r"
expect  "Press ENTER to continue, or Ctrl-C to abort*"
send -- "\r"
expect -exact "\[ admin email \] "
send -- "$env(ADMIN)\r"
expect -exact "\[ admin password \] "
send -- "$env(ADMIN_PW)\r"
expect -exact "\[ admin password again \] "
send -- "$env(ADMIN_PW)\r"
expect eof
